// Generated by CoffeeScript 1.9.1
(function() {
  var CommandConsole, commander, cormo_console, resolve;

  commander = require('commander');

  cormo_console = require('../util/console');

  resolve = require('path').resolve;

  CommandConsole = (function() {
    function CommandConsole(argv) {
      var cwd, e, i, len, load, loads, path, program;
      loads = [];
      program = new commander.Command('cormo');
      program.usage('console [options]').option('-l, --load <path>', 'load specified module').option('-d, --inspect-depth <depth>', 'specify depth for util.inspect').option('--javascript', 'using JavaScript instead of CoffeeScript').on('load', function(path) {
        return loads.push(path);
      }).on('inspect-depth', (function(_this) {
        return function(depth) {
          return _this.inspect_depth = depth;
        };
      })(this)).on('javascript', (function(_this) {
        return function() {
          return _this.language = 'javascript';
        };
      })(this));
      if (argv.indexOf('--help') >= 0 || argv.indexOf('-h') >= 0) {
        program.help();
      }
      program.parse(argv);
      require('coffee-script/register');
      cwd = process.cwd();
      for (i = 0, len = loads.length; i < len; i++) {
        load = loads[i];
        console.log("Loading module '" + load + "'...");
        try {
          path = resolve(cwd, load);
          require(path);
        } catch (_error) {
          e = _error;
          if (e.code === 'MODULE_NOT_FOUND' && RegExp("'" + path + "'$").test(e.message)) {
            try {
              require(load);
            } catch (_error) {
              e = _error;
              console.log(e.toString());
            }
          } else {
            console.log(e.toString());
          }
        }
      }
    }

    CommandConsole.prototype.run = function() {
      if (this.language === 'javascript') {
        return this.startJS();
      } else {
        return this.startCoffee();
      }
    };

    CommandConsole.prototype.startCoffee = function() {
      return cormo_console.startCoffee({
        inspect_depth: this.inspect_depth
      }).on('exit', function() {
        return process.exit(0);
      });
    };

    CommandConsole.prototype.startJS = function() {
      return cormo_console.startJS({
        inspect_depth: this.inspect_depth
      }).on('exit', function() {
        return process.exit(0);
      });
    };

    return CommandConsole;

  })();

  module.exports = CommandConsole;

}).call(this);
