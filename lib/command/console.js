// Generated by CoffeeScript 1.6.2
(function() {
  var CommandConsole, Connection, coffee, commander, path, prettyErrorMessage, repl, vm;

  coffee = require('coffee-script');

  commander = require('commander');

  path = require('path');

  repl = require('repl');

  vm = require('vm');

  Connection = require('../connection');

  prettyErrorMessage = coffee.helpers.prettyErrorMessage || function(e) {
    return e;
  };

  CommandConsole = (function() {
    function CommandConsole(argv) {
      var cwd, load, loads, program, _i, _len;

      loads = [];
      this.program = program = new commander.Command('cormo');
      program.usage('console [options]').option('-l, --load <path>', 'load specified module').on('load', function(path) {
        return loads.push(path);
      });
      if (argv.indexOf('--help') >= 0 || argv.indexOf('-h') >= 0) {
        program.help();
      }
      program.parse(argv);
      try {
        cwd = process.cwd();
        for (_i = 0, _len = loads.length; _i < _len; _i++) {
          load = loads[_i];
          console.log("Loading module '" + load + "'...");
          require(path.resolve(cwd, load));
        }
      } catch (_error) {}
    }

    CommandConsole.prototype.run = function() {
      return this.runCoffee();
    };

    CommandConsole.prototype.runCoffee = function() {
      repl = repl.start({
        prompt: 'cormo> ',
        "eval": function(cmd, context, filename, callback) {
          var e, js, result;

          if (cmd[0] === '(' && cmd[cmd.length - 1] === ')' && !cmd.substr(1, cmd.length - 2).trim()) {
            return callback(null);
          }
          try {
            js = coffee.compile(cmd, {
              filename: filename,
              bare: true
            });
            result = vm.runInContext(js, context, filename);
          } catch (_error) {
            e = _error;
            return callback(prettyErrorMessage(e, filename, cmd, true));
          }
          return callback(null, result);
        }
      });
      repl.on('exit', function() {
        return process.exit(0);
      });
      return this._setupContext(repl.context);
    };

    CommandConsole.prototype._setupContext = function(context) {
      var connection, model, modelClass, _ref, _results;

      context.connection = connection = Connection.defaultConnection;
      _ref = connection.models;
      _results = [];
      for (model in _ref) {
        modelClass = _ref[model];
        _results.push(context[model] = modelClass);
      }
      return _results;
    };

    return CommandConsole;

  })();

  module.exports = CommandConsole;

}).call(this);
