// Generated by CoffeeScript 1.3.3
(function() {
  var DBModel, inflector;

  inflector = require('./inflector');

  /*
  # Base class for models
  */


  DBModel = (function() {

    DBModel.String = String;

    DBModel.Number = Number;

    DBModel.ForeignKey = function() {};

    /*
      # Creates a record
      # @param {Object} data
    */


    function DBModel(data) {
      var schema,
        _this = this;
      data = data || {};
      schema = this.constructor._schema;
      Object.keys(schema).forEach(function(field) {
        if (data[field]) {
          return _this[field] = data[field];
        }
      });
    }

    /*
      # Saves data to the database
    */


    DBModel.prototype.save = function(callback) {
      var ctor,
        _this = this;
      if (this.id) {

      } else {
        if (Object.keys(this).length === 0) {
          return callback(new Error('empty data'));
        }
        ctor = this.constructor;
        return ctor._connection._adapter.create(ctor._name, this, function(error, id) {
          if (!error) {
            _this.id = id;
          }
          return callback(error);
        });
      }
    };

    /*
      # Finds a record by id
      # @param {String} id
      # @param {Function} callback
      # @param {Error} callback.error
      # @param {DBModel} callback.record
    */


    DBModel.find = function(id, callback) {
      return this._connection._adapter.findById(this._name, id, callback);
    };

    /*
      # Adds a has-many association
      # @param {Class} target_model
    */


    DBModel.hasMany = function(target_model) {
      var field, fieldCache, fieldGetter;
      target_model._addForeignKey(inflector.foreign_key(this._name));
      field = inflector.tableize(target_model._name);
      fieldCache = '__' + field;
      fieldGetter = '__getter_' + field;
      return Object.defineProperty(this.prototype, field, {
        get: function() {
          var getter;
          if (!this.hasOwnProperty(fieldGetter)) {
            this[fieldGetter] = getter = function(callback) {
              var self;
              self = getter.__scope;
              if (!self.hasOwnProperty(fieldCache)) {
                self[fieldCache] = [];
              }
              return callback(null, self[fieldCache]);
            };
            getter.build = function(data) {
              var new_object, self;
              self = getter.__scope;
              new_object = new target_model(data);
              self[fieldCache].push(new_object);
              return new_object;
            };
            getter.__scope = this;
          }
          return this[fieldGetter];
        }
      });
    };

    /*
      # Adds a belongs-to association
      # @param {Class} target_model
    */


    DBModel.belongsTo = function(target_model) {
      return this._addForeignKey(inflector.foreign_key(target_model._name));
    };

    /*
      # Drops this model from the database
      # @param {Function} callback
      # @param {Error} callback.error
    */


    DBModel.drop = function(callback) {
      return this._connection._adapter.drop(this._name, callback);
    };

    /*
      # Deletes all records from the database
      # @param {Function} callback
      # @param {Error} callback.error
    */


    DBModel.deleteAll = function(callback) {
      return this._connection._adapter.deleteAll(this._name, callback);
    };

    DBModel._addForeignKey = function(field) {
      if (this._schema.hasOwnProperty(field)) {
        return;
      }
      return this._schema[field] = {
        type: this.ForeignKey
      };
    };

    return DBModel;

  })();

  module.exports = DBModel;

}).call(this);
