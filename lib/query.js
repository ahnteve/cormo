// Generated by CoffeeScript 1.4.0
(function() {
  var Query, _, _bindDomain;

  _ = require('underscore');

  _bindDomain = function(fn) {
    var d;
    if (d = process.domain) {
      return d.bind(fn);
    } else {
      return fn;
    }
  };

  Query = (function() {

    function Query(model) {
      this._model = model;
      this._name = model._name;
      this._connection = model._connection;
      this._adapter = model._connection._adapter;
      this._conditions = [];
      this._options = {
        orders: []
      };
    }

    Query.prototype.find = function(id) {
      if (Array.isArray(id)) {
        this._id = _.uniq(id);
        this._find_single_id = false;
      } else {
        this._id = id;
        this._find_single_id = true;
      }
      return this;
    };

    Query.prototype.findPreserve = function(ids) {
      this._id = _.uniq(ids);
      this._find_single_id = false;
      this._preserve_order_ids = ids;
      return this;
    };

    Query.prototype.near = function(target) {
      this._options.near = target;
      return this;
    };

    Query.prototype.where = function(condition) {
      if (Array.isArray(condition)) {
        this._conditions.push.apply(this._conditions, condition);
      } else if (condition != null) {
        this._conditions.push(condition);
      }
      return this;
    };

    Query.prototype.select = function(columns) {
      var schema_columns;
      this._options.select = null;
      schema_columns = Object.keys(this._model._schema);
      if (typeof columns === 'string') {
        columns = columns.split(/\s+/).filter(function(column) {
          return schema_columns.indexOf(column) >= 0;
        });
        this._options.select = columns;
      }
      return this;
    };

    Query.prototype.order = function(orders) {
      var schema_columns,
        _this = this;
      schema_columns = Object.keys(this._model._schema);
      if (typeof orders === 'string') {
        orders.split(/\s+/).forEach(function(order) {
          var asc;
          asc = true;
          if (order[0] === '-') {
            asc = false;
            order = order.slice(1);
          }
          if (schema_columns.indexOf(order) >= 0) {
            return _this._options.orders.push(asc ? order : '-' + order);
          }
        });
      }
      return this;
    };

    Query.prototype.limit = function(limit) {
      this._options.limit = limit;
      return this;
    };

    Query.prototype.exec = function(callback) {
      var expected_count,
        _this = this;
      if (this._model._waitingForConnection(this, this.exec, arguments)) {
        return;
      }
      if (this._find_single_id && this._conditions.length === 0) {
        this._connection.log(this._name, 'find by id', {
          id: this._id,
          options: this._options
        });
        this._adapter.findById(this._name, this._id, this._options, _bindDomain(function(error, record) {
          if (error || !record) {
            return callback(new Error('not found'));
          }
          return callback(null, record);
        }));
        return;
      }
      expected_count = void 0;
      if (this._id) {
        if (Array.isArray(this._id)) {
          if (this._id.length === 0) {
            return callback(null, []);
          }
          this._conditions.push({
            id: {
              $in: this._id
            }
          });
          expected_count = this._id.length;
        } else {
          this._conditions.push({
            id: this._id
          });
          expected_count = 1;
        }
      }
      this._connection.log(this._name, 'find', {
        conditions: this._conditions,
        options: this._options
      });
      return this._adapter.find(this._name, this._conditions, this._options, _bindDomain(function(error, records) {
        if (error) {
          return callback(error);
        }
        if (expected_count != null) {
          if (records.length !== expected_count) {
            return callback(new Error('not found'));
          }
        }
        if (_this._preserve_order_ids) {
          return callback(null, _this._preserve_order_ids.map(function(id) {
            var record, _i, _len;
            for (_i = 0, _len = records.length; _i < _len; _i++) {
              record = records[_i];
              if (record.id === id) {
                return record;
              }
            }
          }));
        } else {
          return callback(null, records);
        }
      }));
    };

    Query.prototype.count = function(callback) {
      if (this._model._waitingForConnection(this, this.count, arguments)) {
        return;
      }
      if (this._id) {
        this._conditions.push({
          id: this._id
        });
        delete this._id;
      }
      this._connection.log(this._name, 'count', {
        conditions: this._conditions
      });
      return this._adapter.count(this._name, this._conditions, _bindDomain(callback));
    };

    Query.prototype["delete"] = function(callback) {
      if (this._model._waitingForConnection(this, this["delete"], arguments)) {
        return;
      }
      if (this._id) {
        this._conditions.push({
          id: this._id
        });
        delete this._id;
      }
      this._connection.log(this._name, 'delete', {
        conditions: this._conditions
      });
      return this._adapter["delete"](this._name, this._conditions, _bindDomain(callback));
    };

    return Query;

  })();

  module.exports = Query;

}).call(this);
