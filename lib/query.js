// Generated by CoffeeScript 1.4.0
(function() {
  var Query, _;

  _ = require('underscore');

  /*
  # Collects conditions to query
  */


  Query = (function() {
    /*
      # Creates a query instance
      # @param {Class<Model>} model
    */

    function Query(model) {
      this._model = model;
      this._name = model._name;
      this._adapter = model._connection._adapter;
      this._conditions = [];
      this._options = {};
    }

    /*
      # Finds a record by id
      # @param {RecordID|Array<RecordID>} id
      # @return {Query} this
    */


    Query.prototype.find = function(id) {
      if (Array.isArray(id)) {
        this._id = _.uniq(id);
      } else {
        this._id = id;
      }
      return this;
    };

    /*
      # Finds records near target
      # @param {Object} target
      # @return {Query} this
    */


    Query.prototype.near = function(target) {
      this._options.near = target;
      return this;
    };

    /*
      # Finds records by condition
      # @param {Object} condition
      # @return {Query} this
    */


    Query.prototype.where = function(condition) {
      if (Array.isArray(condition)) {
        this._conditions.push.apply(this._conditions, condition);
      } else if (condition != null) {
        this._conditions.push(condition);
      }
      return this;
    };

    /*
      # Selects columns for result
      # @param {Object} columns
      # @return {Query} this
    */


    Query.prototype.select = function(columns) {
      var schema_columns;
      this._options.select = null;
      schema_columns = Object.keys(this._model._schema);
      if (typeof columns === 'string') {
        columns = columns.split(/\s+/).filter(function(column) {
          return schema_columns.indexOf(column) >= 0;
        });
        this._options.select = columns;
      }
      return this;
    };

    /*
      # Sets limit of query
      # @param {Number} limit
      # @return {Query} this
    */


    Query.prototype.limit = function(limit) {
      this._options.limit = limit;
      return this;
    };

    /*
      # Executes the query
      # @param {Function} callback
      # @param {Error} callback.error
      # @param {Model|Array<Model>} callback.records
      # @return {Query} this
    */


    Query.prototype.exec = function(callback) {
      var expected_count;
      if (this._id && !Array.isArray(this._id) && this._conditions.length === 0) {
        this._adapter.findById(this._name, this._id, this._options, function(error, record) {
          if (error || !record) {
            return callback(new Error('not found'));
          }
          return callback(null, record);
        });
        return;
      }
      expected_count = void 0;
      if (this._id) {
        if (Array.isArray(this._id)) {
          if (this._id.length === 0) {
            return callback(null, []);
          }
          this._conditions.push({
            id: {
              $in: this._id
            }
          });
          expected_count = this._id.length;
        } else {
          this._conditions.push({
            id: this._id
          });
          expected_count = 1;
        }
      }
      return this._adapter.find(this._name, this._conditions, this._options, function(error, records) {
        if (error) {
          return callback(error);
        }
        if (expected_count != null) {
          if (records.length !== expected_count) {
            return callback(new Error('not found'));
          }
        }
        return callback(null, records);
      });
    };

    /*
      # Executes the query as a count operation
      # @param {Function} callback
      # @param {Error} callback.error
      # @param {Number} callback.count
      # @return {Query} this
    */


    Query.prototype.count = function(callback) {
      if (this._id) {
        this._conditions.push({
          id: this._id
        });
        delete this._id;
      }
      return this._adapter.count(this._name, this._conditions, callback);
    };

    /*
      # Executes the query as a delete operation
      # @param {Function} callback
      # @param {Error} callback.error
      # @param {Number} callback.count
      # @return {Query} this
    */


    Query.prototype["delete"] = function(callback) {
      if (this._id) {
        this._conditions.push({
          id: this._id
        });
        delete this._id;
      }
      return this._adapter["delete"](this._name, this._conditions, callback);
    };

    return Query;

  })();

  module.exports = Query;

}).call(this);
