// Generated by CoffeeScript 1.3.3

/*
# Collects conditions to query
*/


(function() {
  var DBQuery;

  DBQuery = (function() {
    /*
      # Creates a query instance
      # @param {Class} model
    */

    function DBQuery(model) {
      this._model = model;
      this._name = model._name;
      this._adapter = model._connection._adapter;
      this._conditions = [];
      this._options = {};
    }

    /*
      # Finds a record by id
      # @param {String} id
      # @return {DBQuery} this
    */


    DBQuery.prototype.find = function(id) {
      this._id = id;
      return this;
    };

    /*
      # Finds records near target
      # @param {Object} target
      # @return {DBQuery} this
    */


    DBQuery.prototype.near = function(target) {
      this._options.near = target;
      return this;
    };

    /*
      # Finds records by condition
      # @param {Object} condition
      # @return {DBQuery} this
    */


    DBQuery.prototype.where = function(condition) {
      if (Array.isArray(condition)) {
        this._conditions.push.apply(this._conditions, condition);
      } else if (condition != null) {
        this._conditions.push(condition);
      }
      return this;
    };

    /*
      # Selects columns for result
      # @param {Object} columns
      # @return {DBQuery} this
    */


    DBQuery.prototype.select = function(columns) {
      var schema_columns;
      this._options.select = null;
      schema_columns = Object.keys(this._model._schema);
      if (typeof columns === 'string') {
        columns = columns.split(/\s+/).filter(function(column) {
          return schema_columns.indexOf(column) >= 0;
        });
        this._options.select = columns;
      }
      return this;
    };

    /*
      # Sets limit of query
      # @param {Number} limit
      # @return {DBQuery} this
    */


    DBQuery.prototype.limit = function(limit) {
      this._options.limit = limit;
      return this;
    };

    /*
      # Executes the query
      # @param {Function} callback
      # @param {Error} callback.error
      # @param {Array<DBModel>} callback.records
      # @return {DBQuery} this
    */


    DBQuery.prototype.exec = function(callback) {
      if (this._id && this._conditions.length === 0) {
        this._adapter.findById(this._name, this._id, this._options, function(error, record) {
          if (error) {
            return callback(error);
          }
          return callback(null, [record]);
        });
        return;
      }
      if (this._id) {
        this._conditions.push({
          id: this._id
        });
        delete this._id;
      }
      return this._adapter.find(this._name, this._conditions, this._options, callback);
    };

    /*
      # Executes the query as a count operation
      # @param {Function} callback
      # @param {Error} callback.error
      # @param {Number} callback.count
      # @return {DBQuery} this
    */


    DBQuery.prototype.count = function(callback) {
      if (this._id) {
        this._conditions.push({
          id: this._id
        });
        delete this._id;
      }
      return this._adapter.count(this._name, this._conditions, callback);
    };

    /*
      # Executes the query as a delete operation
      # @param {Function} callback
      # @param {Error} callback.error
      # @param {Number} callback.count
      # @return {DBQuery} this
    */


    DBQuery.prototype["delete"] = function(callback) {
      if (this._id) {
        this._conditions.push({
          id: this._id
        });
        delete this._id;
      }
      return this._adapter["delete"](this._name, this._conditions, callback);
    };

    return DBQuery;

  })();

  module.exports = DBQuery;

}).call(this);
