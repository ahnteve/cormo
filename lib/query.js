// Generated by CoffeeScript 1.6.2
(function() {
  var Query, async, _, _bindDomain;

  _ = require('underscore');

  async = require('async');

  _bindDomain = function(fn) {
    var d;

    if (d = process.domain) {
      return d.bind(fn);
    } else {
      return fn;
    }
  };

  Query = (function() {
    function Query(model) {
      this._model = model;
      this._name = model._name;
      this._connection = model._connection;
      this._adapter = model._connection._adapter;
      this._conditions = [];
      this._includes = [];
      this._options = {
        orders: []
      };
    }

    Query.prototype.find = function(id) {
      if (Array.isArray(id)) {
        this._id = _.uniq(id);
        this._find_single_id = false;
      } else {
        this._id = id;
        this._find_single_id = true;
      }
      return this;
    };

    Query.prototype.findPreserve = function(ids) {
      this._id = _.uniq(ids);
      this._find_single_id = false;
      this._preserve_order_ids = ids;
      return this;
    };

    Query.prototype.near = function(target) {
      this._options.near = target;
      return this;
    };

    Query.prototype.where = function(condition) {
      if (Array.isArray(condition)) {
        this._conditions.push.apply(this._conditions, condition);
      } else if (condition != null) {
        this._conditions.push(condition);
      }
      return this;
    };

    Query.prototype.select = function(columns) {
      var intermediate_paths, schema_columns, select;

      this._options.select = null;
      if (typeof columns === 'string') {
        schema_columns = Object.keys(this._model._schema);
        intermediate_paths = this._model._intermediate_paths;
        select = [];
        columns.split(/\s+/).forEach(function(column) {
          if (schema_columns.indexOf(column) >= 0) {
            return select.push(column);
          } else if (intermediate_paths[column]) {
            column += '.';
            return schema_columns.forEach(function(sc) {
              if (sc.indexOf(column) === 0) {
                return select.push(sc);
              }
            });
          }
        });
        this._options.select = select;
      }
      return this;
    };

    Query.prototype.order = function(orders) {
      var schema_columns,
        _this = this;

      schema_columns = Object.keys(this._model._schema);
      if (typeof orders === 'string') {
        orders.split(/\s+/).forEach(function(order) {
          var asc;

          asc = true;
          if (order[0] === '-') {
            asc = false;
            order = order.slice(1);
          }
          if (schema_columns.indexOf(order) >= 0) {
            return _this._options.orders.push(asc ? order : '-' + order);
          }
        });
      }
      return this;
    };

    Query.prototype.group = function(group_by, fields) {
      var columns, schema_columns;

      this._options.group_by = null;
      schema_columns = Object.keys(this._model._schema);
      if (typeof group_by === 'string') {
        columns = group_by.split(/\s+/).filter(function(column) {
          return schema_columns.indexOf(column) >= 0;
        });
        this._options.group_by = columns;
      }
      this._options.group_fields = fields;
      return this;
    };

    Query.prototype.limit = function(limit) {
      this._options.limit = limit;
      return this;
    };

    Query.prototype.skip = function(skip) {
      this._options.skip = skip;
      return this;
    };

    Query.prototype.return_raw_instance = function() {
      this._options.return_raw_instance = true;
      return this;
    };

    Query.prototype.cache = function(options) {
      this._options.cache = options;
      return this;
    };

    Query.prototype.include = function(column, select) {
      this._includes.push({
        column: column,
        select: select
      });
      return this;
    };

    Query.prototype._exec = function(options, callback) {
      var expected_count,
        _this = this;

      if (this._find_single_id && this._conditions.length === 0) {
        if (!(options != null ? options.skip_log : void 0)) {
          this._connection.log(this._name, 'find by id', {
            id: this._id,
            options: this._options
          });
        }
        this._adapter.findById(this._name, this._id, this._options, _bindDomain(function(error, record) {
          if (error || !record) {
            return callback(new Error('not found'));
          }
          return callback(null, record);
        }));
        return;
      }
      expected_count = void 0;
      if (this._id) {
        if (Array.isArray(this._id)) {
          if (this._id.length === 0) {
            return callback(null, []);
          }
          this._conditions.push({
            id: {
              $in: this._id
            }
          });
          expected_count = this._id.length;
        } else {
          this._conditions.push({
            id: this._id
          });
          expected_count = 1;
        }
      }
      if (!(options != null ? options.skip_log : void 0)) {
        this._connection.log(this._name, 'find', {
          conditions: this._conditions,
          options: this._options
        });
      }
      return this._adapter.find(this._name, this._conditions, this._options, _bindDomain(function(error, records) {
        if (error) {
          return callback(error);
        }
        if (expected_count != null) {
          if (records.length !== expected_count) {
            return callback(new Error('not found'));
          }
        }
        if (_this._preserve_order_ids) {
          return callback(null, _this._preserve_order_ids.map(function(id) {
            var record, _i, _len;

            for (_i = 0, _len = records.length; _i < _len; _i++) {
              record = records[_i];
              if (record.id === id) {
                return record;
              }
            }
          }));
        } else {
          return callback(null, records);
        }
      }));
    };

    Query.prototype._execAndInclude = function(options, callback) {
      var _this = this;

      return this._exec(options, function(error, records) {
        if (error) {
          return callback(error);
        }
        return async.forEach(_this._includes, function(include, callback) {
          return _this._connection.fetchAssociated(records, include.column, include.select, callback);
        }, function(error) {
          return callback(error, records);
        });
      });
    };

    Query.prototype.exec = function(options, callback) {
      var cache_key, cache_options,
        _this = this;

      if (this._model._waitingForReady(this, this.exec, arguments)) {
        return;
      }
      if (typeof options === 'function') {
        callback = options;
        options = {};
      }
      if ((cache_options = this._options.cache) && (cache_key = cache_options.key)) {
        return this._model._loadFromCache(cache_key, cache_options.refresh, function(error, records) {
          if (!error) {
            return callback(null, records);
          }
          return _this._execAndInclude(options, function(error, records) {
            if (error) {
              return callback(error);
            }
            return _this._model._saveToCache(cache_key, cache_options.ttl, records, function(error) {
              return callback(error, records);
            });
          });
        });
      } else {
        return this._execAndInclude(options, callback);
      }
    };

    Query.prototype.count = function(callback) {
      if (this._model._waitingForReady(this, this.count, arguments)) {
        return;
      }
      if (this._id) {
        this._conditions.push({
          id: this._id
        });
        delete this._id;
      }
      this._connection.log(this._name, 'count', {
        conditions: this._conditions
      });
      return this._adapter.count(this._name, this._conditions, _bindDomain(callback));
    };

    Query.prototype._validateAndBuildSaveData = function(errors, data, updates, path, object) {
      var column, error, model, property, schema, temp, _results;

      model = this._model;
      schema = model._schema;
      _results = [];
      for (column in object) {
        property = schema[path + column];
        if (property) {
          try {
            model._validateColumn(updates, path + column, property);
          } catch (_error) {
            error = _error;
            errors.push(error);
          }
          _results.push(model._buildSaveDataColumn(data, updates, path + column, property, true));
        } else if (!object[column] && model._intermediate_paths[column]) {
          column += '.';
          temp = {};
          Object.keys(schema).forEach(function(sc) {
            if (sc.indexOf(column) === 0) {
              return temp[sc.substr(column.length)] = null;
            }
          });
          _results.push(this._validateAndBuildSaveData(errors, data, updates, path + column, temp));
        } else if (typeof object[column] === 'object') {
          _results.push(this._validateAndBuildSaveData(errors, data, updates, path + column + '.', object[column]));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Query.prototype.update = function(updates, callback) {
      var data, errors;

      if (this._model._waitingForReady(this, this.update, arguments)) {
        return;
      }
      errors = [];
      data = {};
      this._validateAndBuildSaveData(errors, data, updates, '', updates);
      if (errors.length > 0) {
        return callback(new Error(errors.join(',')));
      }
      if (this._id) {
        this._conditions.push({
          id: this._id
        });
        delete this._id;
      }
      this._connection.log(this._name, 'update', {
        data: data,
        conditions: this._conditions,
        options: this._options
      });
      return this._adapter.updatePartial(this._name, data, this._conditions, this._options, _bindDomain(callback));
    };

    Query.prototype._doIntegrityActions = function(integrities, ids, callback) {
      var _this = this;

      return async.forEach(integrities, function(integrity, callback) {
        var conditions, data;

        if (integrity.type === 'parent_nullify') {
          data = {};
          data[integrity.column] = null;
          conditions = {};
          conditions[integrity.column] = ids;
          return integrity.child.update(data, conditions, function(error, count) {
            return callback(error);
          });
        } else if (integrity.type === 'parent_restrict') {
          conditions = {};
          conditions[integrity.column] = ids;
          return integrity.child.count(conditions, function(error, count) {
            if (error) {
              return callback(error);
            }
            if (count > 0) {
              return callback(new Error('rejected'));
            }
            return callback(null);
          });
        } else if (integrity.type === 'parent_delete') {
          conditions = {};
          conditions[integrity.column] = ids;
          return integrity.child["delete"](conditions, function(error, count) {
            if (error) {
              return callback(error);
            }
            return callback(null);
          });
        } else {
          return callback(null);
        }
      }, callback);
    };

    Query.prototype._doArchiveAndIntegrity = function(options, callback) {
      var integrities, need_archive, need_child_archive, need_integrity,
        _this = this;

      need_archive = this._model.archive;
      integrities = this._model._integrities.filter(function(integrity) {
        return integrity.type.substr(0, 7) === 'parent_';
      });
      need_child_archive = integrities.some(function(integrity) {
        return integrity.child.archive;
      });
      need_integrity = need_child_archive || (integrities.length > 0 && !this._adapter.native_integrity);
      if (!need_archive && !need_integrity) {
        return callback(null);
      }
      return async.waterfall([
        function(callback) {
          var query;

          query = _this._model.where(_this._conditions);
          if (!need_archive) {
            query.select('');
          }
          return query.exec({
            skip_log: options != null ? options.skip_log : void 0
          }, callback);
        }, function(records, callback) {
          var archive_records;

          if (!need_archive) {
            return callback(null, records);
          }
          archive_records = records.map(function(record) {
            return {
              model: _this._name,
              data: record
            };
          });
          return _this._connection.models['_Archive'].createBulk(archive_records, function(error) {
            if (error) {
              return callback(error);
            }
            return callback(null, records);
          });
        }, function(records, callback) {
          var ids;

          if (!need_integrity) {
            return callback(null);
          }
          if (records.length === 0) {
            return callback(null);
          }
          ids = records.map(function(record) {
            return record.id;
          });
          return _this._doIntegrityActions(integrities, ids, callback);
        }
      ], callback);
    };

    Query.prototype["delete"] = function(options, callback) {
      var _this = this;

      if (this._model._waitingForReady(this, this["delete"], arguments)) {
        return;
      }
      if (typeof options === 'function') {
        callback = options;
        options = {};
      }
      if (this._id) {
        this._conditions.push({
          id: this._id
        });
        delete this._id;
      }
      if (!(options != null ? options.skip_log : void 0)) {
        this._connection.log(this._name, 'delete', {
          conditions: this._conditions
        });
      }
      return this._doArchiveAndIntegrity(options, function(error) {
        if (error) {
          return callback(error);
        }
        return _this._adapter["delete"](_this._name, _this._conditions, _bindDomain(callback));
      });
    };

    return Query;

  })();

  module.exports = Query;

}).call(this);
