// Generated by CoffeeScript 1.4.0
(function() {
  var ConnectionManipulate, async, inflector, types;

  async = require('async');

  inflector = require('../inflector');

  types = require('../types');

  ConnectionManipulate = (function() {

    function ConnectionManipulate() {}

    ConnectionManipulate.prototype._manipulateCreation = function(model, data, callback) {
      model = inflector.camelize(model);
      if (!this.models[model]) {
        return callback(new Error("model " + model + " does not exist"));
      }
      model = this.models[model];
      return model.create(data, function(error, record) {
        return callback(error, record);
      });
    };

    ConnectionManipulate.prototype._manipulateDeletion = function(model, data, callback) {
      model = inflector.camelize(model);
      if (!this.models[model]) {
        return callback(new Error("model " + model + " does not exist"));
      }
      model = this.models[model];
      return model["delete"](data, function(error, count) {
        return callback(error);
      });
    };

    ConnectionManipulate.prototype._manipulateDeleteAllModels = function(callback) {
      var _this = this;
      return async.forEach(Object.keys(this.models), function(model, callback) {
        model = _this.models[model];
        return model["delete"](function(error, count) {
          return callback(error);
        });
      }, callback);
    };

    ConnectionManipulate.prototype._manipulateConvertIds = function(id_to_record_map, model, data) {
      var column, property, _ref, _results;
      model = inflector.camelize(model);
      if (!this.models[model]) {
        return;
      }
      model = this.models[model];
      _ref = model._schema;
      _results = [];
      for (column in _ref) {
        property = _ref[column];
        if (property.record_id && data.hasOwnProperty(column)) {
          _results.push(data[column] = id_to_record_map[data[column]].id);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    ConnectionManipulate.prototype.manipulate = function(commands, callback) {
      var id_to_record_map,
        _this = this;
      id_to_record_map = {};
      if (!Array.isArray(commands)) {
        commands = [commands];
      }
      return async.forEachSeries(commands, function(command, callback) {
        var data, id, key, model;
        if (typeof command === 'object') {
          key = Object.keys(command);
          if (key.length === 1) {
            key = key[0];
            data = command[key];
          } else {
            key = void 0;
          }
        } else if (typeof command === 'string') {
          key = command;
        }
        if (!key) {
          return callback(new Error('invalid command: ' + JSON.stringify(command)));
        }
        if (key.substr(0, 7) === 'create_') {
          model = key.substr(7);
          id = data.id;
          delete data.id;
          _this._manipulateConvertIds(id_to_record_map, model, data);
          return _this._manipulateCreation(model, data, function(error, record) {
            if (error) {
              return callback(error);
            }
            if (id) {
              id_to_record_map[id] = record;
            }
            return callback(null);
          });
        } else if (key.substr(0, 7) === 'delete_') {
          model = key.substr(7);
          return _this._manipulateDeletion(model, data, callback);
        } else if (key === 'deleteAll') {
          return _this._manipulateDeleteAllModels(callback);
        } else {
          return callback(new Error('unknown command: ' + key));
        }
      }, function(error) {
        return callback(error, id_to_record_map);
      });
    };

    return ConnectionManipulate;

  })();

  module.exports = ConnectionManipulate;

}).call(this);
