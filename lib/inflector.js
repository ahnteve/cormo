// Generated by CoffeeScript 1.4.0

/*
# Inflectors
# @module inflector
*/


/*
# Plural Rules
# @memberOf inflector
*/


(function() {
  var _plural_rules, _singular_rules, _uncountable_words;

  _plural_rules = [['person$', 'people'], ['man$', 'men'], ['s$', 's'], ['$', 's']];

  /*
  # Singular Rules
  # @memberOf inflector
  */


  _singular_rules = [['people$', 'person'], ['men$', 'man'], ['s$', '']];

  /*
  # Uncountable words
  # @memberOf inflector
  */


  _uncountable_words = ['fish', 'money', 'rice', 'sheep'];

  /*
  # Returns foreign_key for a name
  # @param {String} name
  # @return {String}
  # @memberOf inflector
  */


  exports.foreign_key = function(name) {
    return exports.underscore(name) + '_id';
  };

  /*
  # Returns pluralized string of a string
  # @param {String} str
  # @return {String}
  # @memberOf inflector
  */


  exports.pluralize = function(str) {
    var rule, _i, _len;
    if (_uncountable_words.indexOf(str.toLowerCase()) === -1) {
      for (_i = 0, _len = _plural_rules.length; _i < _len; _i++) {
        rule = _plural_rules[_i];
        if (!(rule[0] instanceof RegExp)) {
          rule[0] = new RegExp(rule[0], 'i');
        }
        if (rule[0].test(str)) {
          return str.replace(rule[0], rule[1]);
        }
      }
    }
    return str;
  };

  /*
  # Returns singularized string of a string
  # @param {String} str
  # @return {String}
  # @memberOf inflector
  */


  exports.singularize = function(str) {
    var rule, _i, _len;
    if (_uncountable_words.indexOf(str.toLowerCase()) === -1) {
      for (_i = 0, _len = _singular_rules.length; _i < _len; _i++) {
        rule = _singular_rules[_i];
        if (!(rule[0] instanceof RegExp)) {
          rule[0] = new RegExp(rule[0], 'i');
        }
        if (rule[0].test(str)) {
          return str.replace(rule[0], rule[1]);
        }
      }
    }
    return str;
  };

  /*
  # Returns table name of a name
  # @param {String} name
  # @return {String}
  # @memberOf inflector
  */


  exports.tableize = function(name) {
    return exports.pluralize(exports.underscore(name));
  };

  /*
  # Returns class name of a name
  # @param {String} name
  # @return {String}
  # @memberOf inflector
  */


  exports.classify = function(name) {
    return exports.camelize(exports.singularize(name));
  };

  /*
  # Returns underscored string of a string
  # @param {String} str
  # @return {String}
  # @memberOf inflector
  */


  exports.underscore = function(str) {
    str = str.replace(/([A-Z0-9]+)([A-Z][a-z])/g, "$1_$2");
    str = str.replace(/([a-z0-9])([A-Z])/g, "$1_$2");
    str = str.replace('-', '_');
    str = str.toLowerCase();
    return str;
  };

  /*
  # Returns camelized string of a string
  # @param {String} str
  # @return {String}
  # @memberOf inflector
  */


  exports.camelize = function(str) {
    str = str.replace(/_(.)/g, function(_, $1) {
      return $1.toUpperCase();
    });
    return str[0].toUpperCase() + str.slice(1);
  };

}).call(this);
