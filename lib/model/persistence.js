// Generated by CoffeeScript 1.4.0
(function() {
  var ModelPersistence, async, inflector, util, _, _bindDomain;

  async = require('async');

  inflector = require('../inflector');

  util = require('../util');

  _ = require('underscore');

  _bindDomain = function(fn) {
    var d;
    if (d = process.domain) {
      return d.bind(fn);
    } else {
      return fn;
    }
  };

  ModelPersistence = (function() {

    function ModelPersistence() {}

    ModelPersistence.create = function(data, options, callback) {
      if (typeof data === 'function') {
        callback = data;
        data = {};
        options = {};
      } else if (typeof options === 'function') {
        callback = options;
        options = {};
      }
      return this.build(data).save(options, callback);
    };

    ModelPersistence.createBulk = function(data, callback) {
      var records,
        _this = this;
      if (!Array.isArray(data)) {
        return callback(new Error('data is not an array'));
      }
      if (data.length === 0) {
        return callback(null, []);
      }
      records = data.map(function(item) {
        return _this.build(item);
      });
      return async.forEach(records, function(record, callback) {
        return record.validate(callback);
      }, function(error) {
        if (error) {
          return callback(error);
        }
        records.forEach(function(record) {
          return record._runCallbacks('save', 'before');
        });
        records.forEach(function(record) {
          return record._runCallbacks('create', 'before');
        });
        return _this._createBulk(records, function(error, records) {
          records.forEach(function(record) {
            return record._runCallbacks('create', 'after');
          });
          records.forEach(function(record) {
            return record._runCallbacks('save', 'after');
          });
          return callback(error, records);
        });
      });
    };

    ModelPersistence._buildSaveDataColumn = function(data, model, column, property, allow_null) {
      var adapter, parts, value;
      adapter = this._adapter;
      parts = property._parts;
      value = util.getPropertyOfPath(model, parts);
      value = adapter.valueToDB(value, column, property);
      if (allow_null || value !== void 0) {
        if (adapter.support_nested) {
          return util.setPropertyOfPath(data, parts, value);
        } else {
          return data[property._dbname] = value;
        }
      }
    };

    ModelPersistence.prototype._buildSaveData = function() {
      var column, ctor, data, property, schema;
      data = {};
      ctor = this.constructor;
      schema = ctor._schema;
      for (column in schema) {
        property = schema[column];
        ctor._buildSaveDataColumn(data, this, column, property);
      }
      if (this.id != null) {
        data.id = ctor._adapter.idToDB(this.id);
      }
      return data;
    };

    ModelPersistence.prototype._create = function(options, callback) {
      var ctor, data,
        _this = this;
      if (this.constructor._waitingForReady(this, this._create, arguments)) {
        return;
      }
      try {
        data = this._buildSaveData();
      } catch (e) {
        return callback(e, this);
      }
      ctor = this.constructor;
      if (!(options != null ? options.skip_log : void 0)) {
        ctor._connection.log(ctor._name, 'create', data);
      }
      return ctor._adapter.create(ctor._name, data, _bindDomain(function(error, id) {
        var foreign_key;
        if (error) {
          return callback(error, _this);
        }
        Object.defineProperty(_this, 'id', {
          configurable: false,
          enumerable: true,
          writable: false,
          value: id
        });
        foreign_key = inflector.foreign_key(ctor._name);
        return async.forEach(Object.keys(ctor._associations), function(column, callback) {
          return async.forEach(_this['__cache_' + column] || [], function(sub, callback) {
            sub[foreign_key] = id;
            return sub.save(function(error) {
              return callback(error);
            });
          }, function(error) {
            return callback(error);
          });
        }, function(error) {
          _this._prev_attributes = {};
          return callback(null, _this);
        });
      }));
    };

    ModelPersistence._createBulk = function(records, callback) {
      var data_array, error;
      if (this._waitingForReady(this, this._createBulk, arguments)) {
        return;
      }
      error = void 0;
      data_array = records.map(function(record) {
        var data;
        try {
          data = record._buildSaveData();
        } catch (e) {
          error = e;
        }
        return data;
      });
      if (error) {
        return callback(error, records);
      }
      this._connection.log(this._name, 'createBulk', data_array);
      return this._adapter.createBulk(this._name, data_array, _bindDomain(function(error, ids) {
        if (error) {
          return callback(error, records);
        }
        records.forEach(function(record, i) {
          return Object.defineProperty(record, 'id', {
            configurable: false,
            enumerable: true,
            writable: false,
            value: ids[i]
          });
        });
        return callback(null, records);
      }));
    };

    ModelPersistence.prototype._update = function(options, callback) {
      var adapter, ctor, data, path, schema,
        _this = this;
      ctor = this.constructor;
      if (ctor._waitingForReady(this, this._update, arguments)) {
        return;
      }
      if (ctor.dirty_tracking) {
        if (!this.isDirty()) {
          return callback(null, this);
        }
        data = {};
        adapter = ctor._adapter;
        schema = ctor._schema;
        try {
          for (path in this._prev_attributes) {
            ctor._buildSaveDataColumn(data, this._attributes, path, schema[path], true);
          }
        } catch (e) {
          return callback(e, this);
        }
        if (!(options != null ? options.skip_log : void 0)) {
          ctor._connection.log(ctor._name, 'update', data);
        }
        return adapter.updatePartial(ctor._name, data, {
          id: this.id
        }, {}, _bindDomain(function(error) {
          if (error) {
            return callback(error, _this);
          }
          _this._prev_attributes = {};
          return callback(null, _this);
        }));
      } else {
        try {
          data = this._buildSaveData();
        } catch (e) {
          return callback(e, this);
        }
        if (!(options != null ? options.skip_log : void 0)) {
          ctor._connection.log(ctor._name, 'update', data);
        }
        return ctor._adapter.update(ctor._name, data, _bindDomain(function(error) {
          if (error) {
            return callback(error, _this);
          }
          _this._prev_attributes = {};
          return callback(null, _this);
        }));
      }
    };

    ModelPersistence.prototype.save = function(options, callback) {
      var _this = this;
      if (typeof options === 'function') {
        callback = options;
        options = {};
      }
      if (typeof callback !== 'function') {
        callback = (function() {});
      }
      if ((options != null ? options.validate : void 0) !== false) {
        this.validate(function(error) {
          if (error) {
            return callback(error);
          }
          return _this.save(_.extend({}, options, {
            validate: false
          }), callback);
        });
        return;
      }
      this._runCallbacks('save', 'before');
      if (this.id) {
        this._runCallbacks('update', 'before');
        return this._update(options, function(error, record) {
          _this._runCallbacks('update', 'after');
          _this._runCallbacks('save', 'after');
          return callback(error, record);
        });
      } else {
        this._runCallbacks('create', 'before');
        return this._create(options, function(error, record) {
          _this._runCallbacks('create', 'after');
          _this._runCallbacks('save', 'after');
          return callback(error, record);
        });
      }
    };

    return ModelPersistence;

  })();

  module.exports = ModelPersistence;

}).call(this);
