// Generated by CoffeeScript 1.4.0
(function() {
  var ModelValidate, types, util;

  types = require('../types');

  util = require('../util');

  ModelValidate = (function() {

    function ModelValidate() {}

    ModelValidate._validateColumn = function(data, column, property) {
      var last, obj, value, _ref;
      _ref = util.getLeafOfPath(data, property._parts, false), obj = _ref[0], last = _ref[1];
      value = obj != null ? obj[last] : void 0;
      if (value != null) {
        switch (property.type) {
          case types.Number:
            value = Number(value);
            if (isNaN(value)) {
              return "'" + column + "' is not a number";
            } else {
              obj[last] = value;
            }
            break;
          case types.Boolean:
            if (typeof value !== 'boolean') {
              return "'" + column + "' is not a boolean";
            }
            break;
          case types.Integer:
            value = Number(value);
            if (isNaN(value) || (value >> 0) !== value) {
              return "'" + column + "' is not an integer";
            } else {
              obj[last] = value;
            }
            break;
          case types.GeoPoint:
            if (!(Array.isArray(value) && value.length === 2)) {
              return "'" + column + "' is not a geo point";
            } else {
              value[0] = Number(value[0]);
              value[1] = Number(value[1]);
            }
            break;
          case types.Date:
            value = new Date(value);
            if (isNaN(value.getTime())) {
              return "'" + column + "' is not a date";
            } else {
              obj[last] = value;
            }
        }
      } else {
        if (property.required) {
          return "'" + column + "' is required";
        }
      }
    };

    ModelValidate.prototype.validate = function(callback) {
      var column, ctor, error, errors, property, schema,
        _this = this;
      this._runCallbacks('validate', 'before');
      errors = [];
      ctor = this.constructor;
      schema = ctor._schema;
      for (column in schema) {
        property = schema[column];
        if (error = ctor._validateColumn(this, column, property)) {
          errors.push(error);
        }
      }
      this.constructor._validators.forEach(function(validator) {
        var r;
        try {
          r = validator(_this);
          if (r === false) {
            return errors.push('validation failed');
          } else if (typeof r === 'string') {
            return errors.push(r);
          }
        } catch (e) {
          return errors.push(e.message);
        }
      });
      if (errors.length > 0) {
        this._runCallbacks('validate', 'after');
        if (typeof callback === "function") {
          callback(new Error(errors.join(',')));
        }
        return false;
      } else {
        this._runCallbacks('validate', 'after');
        if (typeof callback === "function") {
          callback(null);
        }
        return true;
      }
    };

    ModelValidate.addValidator = function(validator) {
      return this._validators.push(validator);
    };

    return ModelValidate;

  })();

  module.exports = ModelValidate;

}).call(this);
