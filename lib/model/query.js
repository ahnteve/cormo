// Generated by CoffeeScript 1.4.0
(function() {
  var ModelQuery, Query;

  Query = require('../query');

  ModelQuery = (function() {

    function ModelQuery() {}

    ModelQuery.find = function(id, callback) {
      var query;
      if (this._waitingForConnection(this, this.find, arguments)) {
        return;
      }
      query = new Query(this);
      query.find(id);
      if (typeof callback === 'function') {
        query.exec(callback);
      }
      return query;
    };

    ModelQuery.where = function(condition, callback) {
      var query;
      if (this._waitingForConnection(this, this.where, arguments)) {
        return;
      }
      if (typeof condition === 'function') {
        callback = condition;
        condition = null;
      }
      query = new Query(this);
      query.where(condition);
      if (typeof callback === 'function') {
        query.exec(callback);
      }
      return query;
    };

    ModelQuery.select = function(columns, callback) {
      var query;
      if (this._waitingForConnection(this, this.select, arguments)) {
        return;
      }
      if (typeof columns === 'function') {
        callback = columns;
        columns = null;
      }
      query = new Query(this);
      query.select(columns);
      if (typeof callback === 'function') {
        query.exec(callback);
      }
      return query;
    };

    ModelQuery.order = function(orders, callback) {
      var query;
      if (this._waitingForConnection(this, this.where, arguments)) {
        return;
      }
      if (typeof orders === 'function') {
        callback = orders;
        orders = null;
      }
      query = new Query(this);
      query.order(orders);
      if (typeof callback === 'function') {
        query.exec(callback);
      }
      return query;
    };

    ModelQuery.count = function(condition, callback) {
      var query;
      if (this._waitingForConnection(this, this.count, arguments)) {
        return;
      }
      if (typeof condition === 'function') {
        callback = condition;
        condition = null;
      }
      query = new Query(this);
      query.where(condition);
      if (typeof callback === 'function') {
        query.count(callback);
      }
      return query;
    };

    ModelQuery["delete"] = function(condition, callback) {
      var query;
      if (this._waitingForConnection(this, this["delete"], arguments)) {
        return;
      }
      if (typeof condition === 'function') {
        callback = condition;
        condition = null;
      }
      query = new Query(this);
      query.where(condition);
      if (typeof callback === 'function') {
        query["delete"](callback);
      }
      return query;
    };

    return ModelQuery;

  })();

  module.exports = ModelQuery;

}).call(this);
