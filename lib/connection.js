// Generated by CoffeeScript 1.4.0
(function() {
  var Connection, EventEmitter, Model, association, type, value, _bindDomain, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventEmitter = require('events').EventEmitter;

  Model = require('./model');

  association = require('./association');

  _bindDomain = function(fn) {
    var d;
    if (d = process.domain) {
      return d.bind(fn);
    } else {
      return fn;
    }
  };

  Connection = (function(_super) {

    __extends(Connection, _super);

    function Connection(adapter_name, settings) {
      var _this = this;
      this.connected = false;
      this.models = {};
      this._pending_associations = [];
      this._adapter = require(__dirname + '/adapters/' + adapter_name)(this);
      this._adapter.connect(settings, _bindDomain(function(error) {
        if (error) {
          _this._adapter = null;
          _this.emit('error', error);
          return;
        }
        _this.connected = true;
        return _this.emit('connected');
      }));
    }

    Connection.prototype.model = function(name, schema) {
      return Model.newModel(this, name, schema);
    };

    Connection.prototype._waitingForConnection = function(object, method, args) {
      if (this.connected) {
        return false;
      }
      this.once('connected', function() {
        return method.apply(object, args);
      });
      return true;
    };

    Connection.prototype._waitingForApplyingSchemas = function(object, method, args) {
      if (!this._applying_schemas) {
        return false;
      }
      this.once('schemas_applied', function() {
        return method.apply(object, args);
      });
      return true;
    };

    Connection.prototype.applySchemas = function(callback) {
      var callAdapter,
        _this = this;
      association.applyAssociations(this, this._pending_associations);
      this._pending_associations = [];
      if ((this._adapter.applySchemas != null) && !this._applying_schemas) {
        this._applying_schemas = true;
        callAdapter = function() {
          return _this._adapter.applySchemas(_bindDomain(function(error) {
            _this._applying_schemas = false;
            _this.emit('schemas_applied');
            return typeof callback === "function" ? callback(error) : void 0;
          }));
        };
        if (this._waitingForConnection(this, callAdapter, arguments)) {
          return;
        }
        return callAdapter();
      } else {
        return typeof callback === "function" ? callback(null) : void 0;
      }
    };

    return Connection;

  })(EventEmitter);

  _ref = require('./types');
  for (type in _ref) {
    value = _ref[type];
    Connection[type] = value;
    Connection.prototype[type] = value;
  }

  module.exports = Connection;

}).call(this);
