// Generated by CoffeeScript 1.3.3
(function() {
  var DBConnection, DBModel, EventEmitter, type, value, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventEmitter = require('events').EventEmitter;

  DBModel = require('./model');

  /*
  # Manages connection to a database
  */


  DBConnection = (function(_super) {

    __extends(DBConnection, _super);

    /*
      # Creates a connection
      # @param {String} adapater_name
      # @param {Object} settings
      # @see MySQLAdapter.createAdapter
      # @see MongoDBAdapter.createAdapter
    */


    function DBConnection(adapter_name, settings) {
      var _this = this;
      this.connected = false;
      this.models = {};
      this._adapter = require(__dirname + '/adapters/' + adapter_name)(this);
      this._adapter.connect(settings, function(error) {
        if (error) {
          _this._adapter = null;
          _this.emit('error', error);
          return;
        }
        _this.connected = true;
        return _this.emit('connected');
      });
    }

    /*
      # Creates a model class
      # @param {String} name
      # @param {Object} schema
      # @return {Class}
    */


    DBConnection.prototype.model = function(name, schema) {
      return this.models[name] = DBModel.newModel(this, name, schema);
    };

    DBConnection.prototype._waitingForConnection = function(object, method, args) {
      if (this.connected) {
        return false;
      }
      this.once('connected', function() {
        return method.apply(object, args);
      });
      return true;
    };

    /*
      # Applies schemas
      # @param {Function} callback
      # @param {Error} callback.error
    */


    DBConnection.prototype.applySchemas = function(callback) {
      if (this._waitingForConnection(this, this.applySchemas, arguments)) {
        return;
      }
      if (this._adapter.applySchemas != null) {
        return this._adapter.applySchemas(callback);
      } else {
        return callback(null);
      }
    };

    return DBConnection;

  })(EventEmitter);

  _ref = require('./types');
  for (type in _ref) {
    value = _ref[type];
    DBConnection[type] = value;
    DBConnection.prototype[type] = value;
  }

  module.exports = DBConnection;

}).call(this);
