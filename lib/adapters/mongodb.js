// Generated by CoffeeScript 1.3.3
(function() {
  var AdapterBase, MongoDBAdapter, ObjectID, async, mongodb, tableize,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  try {
    mongodb = require('mongodb');
  } catch (error) {
    console.log('Install mongodb module to use this adapter');
    process.exit(1);
  }

  ObjectID = mongodb.ObjectID;

  AdapterBase = require('./base');

  tableize = require('../inflector').tableize;

  async = require('async');

  /*
  # Adapter for MongoDB
  */


  MongoDBAdapter = (function(_super) {

    __extends(MongoDBAdapter, _super);

    /*
      # Creates a MongoDB adapter
      # @param {mongodb.Db} client
    */


    function MongoDBAdapter(connection, client) {
      this._connection = connection;
      this._client = client;
      this._collections = {};
    }

    MongoDBAdapter.prototype._collection = function(name) {
      name = tableize(name);
      if (!this._collections[name]) {
        return this._collections[name] = new mongodb.Collection(this._client, name);
      } else {
        return this._collections[name];
      }
    };

    MongoDBAdapter.prototype._applySchema = function(model, callback) {
      var collection, field, property, unique_fields, _ref;
      collection = this._collection(model);
      unique_fields = [];
      _ref = this._connection.models[model]._schema;
      for (field in _ref) {
        property = _ref[field];
        if (property.unique) {
          unique_fields.push(field);
        }
      }
      return async.forEach(unique_fields, function(field, callback) {
        return collection.ensureIndex(field, {
          unique: true,
          sparse: true
        }, function(error) {
          return callback(error);
        });
      }, function(error) {
        return callback(error);
      });
    };

    /*
      # Ensures indexes
      # @param {Function} callback
      # @param {Error} callback.error
      # @see DBConnection.applySchemas
    */


    MongoDBAdapter.prototype.applySchemas = function(callback) {
      var _this = this;
      return async.forEach(Object.keys(this._connection.models), function(model, callback) {
        return _this._applySchema(model, callback);
      }, function(error) {
        return callback(error);
      });
    };

    /*
      # Drops a model from the database
      # @param {String} model
      # @param {Function} callback
      # @param {Error} callback.error
      # @see DBModel.drop
    */


    MongoDBAdapter.prototype.drop = function(model, callback) {
      var name;
      name = tableize(model);
      delete this._collections[name];
      return this._client.dropCollection(name, function(error) {
        if (error && error.errmsg !== 'ns not found') {
          return callback(MongoDBAdapter.wrapError('unknown error', error));
        }
        return callback(null);
      });
    };

    /*
      # Deletes all records from the database
      # @param {String} model
      # @param {Function} callback
      # @param {Error} callback.error
      # @see DBModel.deleteAll
    */


    MongoDBAdapter.prototype.deleteAll = function(model, callback) {
      return this._collection(model).remove({}, function(error) {
        if (error) {
          return callback(MongoDBAdapter.wrapError('unknown error', error));
        }
        return callback(null);
      });
    };

    /*
      # Creates a record
      # @param {String} model
      # @param {Object} data
      # @param {Function} callback
      # @param {Error} callback.error
      # @param {String} callback.id
    */


    MongoDBAdapter.prototype.create = function(model, data, callback) {
      return this._collection(model).insert(data, {
        safe: true
      }, function(error, result) {
        var id, key, _ref;
        if ((error != null ? error.code : void 0) === 11000) {
          key = error.err.match(/index: [\w-.]+\$(\w+)_1/);
          return callback(new Error('duplicated ' + (key != null ? key[1] : void 0)));
        }
        if (error) {
          return callback(MongoDBAdapter.wrapError('unknown error', error));
        }
        id = result != null ? (_ref = result[0]) != null ? _ref._id.toString() : void 0 : void 0;
        if (id) {
          delete data._id;
          return callback(null, id);
        } else {
          return callback(new Error('unexpected result'));
        }
      });
    };

    /*
      # Updates a record
      # @param {String} model
      # @param {Object} data
      # @param {Function} callback
      # @param {Error} callback.error
    */


    MongoDBAdapter.prototype.update = function(model, data, callback) {
      var id;
      try {
        id = new ObjectID(data.id);
      } catch (e) {
        return callback(new Error('unknown error'));
      }
      return this._collection(model).update({
        _id: id
      }, data, {
        safe: true
      }, function(error) {
        if (error) {
          return callback(MongoDBAdapter.wrapError('unknown error', error));
        }
        return callback(null);
      });
    };

    MongoDBAdapter.prototype._convertToModelInstance = function(model, data) {
      var field, modelClass, record;
      modelClass = this._connection.models[model];
      record = new modelClass();
      record.id = data._id.toString();
      for (field in modelClass._schema) {
        record[field] = data[field];
      }
      return record;
    };

    /*
      # Finds a record by id
      # @param {String} model
      # @param {String} id
      # @param {Function} callback
      # @param {Error} callback.error
      # @param {DBModel} callback.record
      # @throws Error('not found')
    */


    MongoDBAdapter.prototype.findById = function(model, id, callback) {
      var _this = this;
      try {
        id = new ObjectID(id);
      } catch (e) {
        return callback(new Error('not found'));
      }
      return this._collection(model).findOne({
        _id: id
      }, function(error, result) {
        if (error) {
          return callback(MongoDBAdapter.wrapError('unknown error', error));
        }
        if (!result) {
          return callback(new Error('not found'));
        }
        return callback(null, _this._convertToModelInstance(model, result));
      });
    };

    /*
      # Finds records
      # @param {String} model
      # @param {Object} conditions
      # @param {Function} callback
      # @param {Error} callback.error
      # @param {Array<DBModel>} callback.records
    */


    MongoDBAdapter.prototype.find = function(model, conditions, callback) {
      var _this = this;
      return this._collection(model).find(conditions, function(error, cursor) {
        if (error || !cursor) {
          return callback(MongoDBAdapter.wrapError('unknown error', error));
        }
        return cursor.toArray(function(error, result) {
          if (error || !cursor) {
            return callback(MongoDBAdapter.wrapError('unknown error', error));
          }
          return callback(null, result.map(function(instance) {
            return _this._convertToModelInstance(model, instance);
          }));
        });
      });
    };

    /*
      # Creates a MongoDB adapter
      # @param {Connection} connection
      # @param {Object} settings
      # @param {String} [settings.host='localhost']
      # @param {Number} [settings.port=27017]
      # @param {String} settings.database
      # @param {Function} callback
      # @param {Error} callback.error
      # @param {MongoDBAdapter} callback.adapter
    */


    MongoDBAdapter.createAdapter = function(connection, settings, callback) {
      var db, server;
      server = new mongodb.Server(settings.host || 'localhost', settings.port || 27017, {});
      db = new mongodb.Db(settings.database, server, {});
      return db.open(function(error, client) {
        if (error) {
          return callback(MongoDBAdapter.wrapError('unknown error', error));
        }
        return callback(null, new MongoDBAdapter(connection, client));
      });
    };

    return MongoDBAdapter;

  })(AdapterBase);

  module.exports = MongoDBAdapter.createAdapter;

}).call(this);
