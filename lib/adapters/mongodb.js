// Generated by CoffeeScript 1.3.3
(function() {
  var AdapterBase, MongoDBAdapter, mongodb,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  try {
    mongodb = require('mongodb');
  } catch (error) {
    console.log('Install mongodb module to use this adapter');
    process.exit(1);
  }

  AdapterBase = require('./base');

  /*
  # Adapter for MongoDB
  # @param {mongodb.Db} client
  */


  MongoDBAdapter = (function(_super) {

    __extends(MongoDBAdapter, _super);

    function MongoDBAdapter(client) {
      this._client = client;
      this._collections = {};
    }

    MongoDBAdapter.prototype._collection = function(name) {
      name = MongoDBAdapter.toCollectionName(name);
      if (!this._collections[name]) {
        return this._collections[name] = new mongodb.Collection(this._client, name);
      } else {
        return this._collections[name];
      }
    };

    /*
      # Create a record
      # @param {String} model
      # @param {Object} data
      # @param {Function} callback
      # @param {Error} callback.error
      # @param {String} callback.id
    */


    MongoDBAdapter.prototype.create = function(model, data, callback) {
      return this._collection(model).insert(data, {
        safe: true
      }, function(error, result) {
        var _ref;
        if (error) {
          return callback(MongoDBAdapter.wrapError('unknown error', error));
        }
        if (result != null ? (_ref = result[0]) != null ? _ref._id : void 0 : void 0) {
          return callback(null, result[0]._id);
        } else {
          return callback(new Error('unexpected result'));
        }
      });
    };

    return MongoDBAdapter;

  })(AdapterBase);

  /*
  # Initialize MongoDB adapter
  # @param {Connection} connection
  # @param {Object} settings
  # @param {String} [settings.host='localhost']
  # @param {Number} [settings.port=27017]
  # @param {String} settings.database
  # @param {Function} callback
  # @param {Error} callback.error
  # @param {MongoDBAdapter} callback.adapter
  */


  module.exports = function(connection, settings, callback) {
    var db, server;
    server = new mongodb.Server(settings.host || 'localhost', settings.port || 27017, {});
    db = new mongodb.Db(settings.database, server, {});
    return db.open(function(error, client) {
      if (error) {
        return callback(MongoDBAdapter.wrapError('unknown error', error));
      }
      return callback(null, new MongoDBAdapter(client));
    });
  };

}).call(this);
