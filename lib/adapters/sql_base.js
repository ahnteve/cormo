// Generated by CoffeeScript 1.9.1
(function() {
  var AdapterBase, SQLAdapterBase, types,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  AdapterBase = require('./base');

  types = require('../types');

  SQLAdapterBase = (function(superClass) {
    extend(SQLAdapterBase, superClass);

    function SQLAdapterBase() {
      return SQLAdapterBase.__super__.constructor.apply(this, arguments);
    }

    SQLAdapterBase.prototype._param_place_holder = function(pos) {
      return '?';
    };

    SQLAdapterBase.prototype._contains_op = 'LIKE';

    SQLAdapterBase.prototype._false_value = 'FALSE';

    SQLAdapterBase.prototype._escape_ch = '"';

    SQLAdapterBase.prototype._convertValueType = function(value, property_type_class) {
      if (property_type_class === types.Date) {
        value = new Date(value);
      } else if (property_type_class === types.Number) {
        value = Number(value);
        if (isNaN(value)) {
          value = Number.MAX_VALUE;
        }
      } else if (property_type_class === types.Integer) {
        value = Number(value);
        if (isNaN(value) || (value >> 0) !== value) {
          value = -2147483648;
        }
      }
      return value;
    };

    SQLAdapterBase.prototype._buildWhereSingle = function(property, key, value, params) {
      var column, keys, op, property_type_class, sub_key, values;
      if (key === 'id') {
        property_type_class = this.key_type;
      } else {
        if (property == null) {
          throw new Error("unknown column '" + key + "'");
        }
        property_type_class = property.type_class;
      }
      if (property && !property_type_class) {
        column = this._buildGroupExpr(property);
      } else {
        column = this._escape_ch + key.replace('.', '_') + this._escape_ch;
      }
      op = '=';
      if (Array.isArray(value)) {
        if (value.length === 0) {
          return this._false_value;
        }
        values = value.map((function(_this) {
          return function(value) {
            params.push(value);
            return _this._param_place_holder(params.length);
          };
        })(this));
        return column + " IN (" + (values.join(',')) + ")";
      } else if (typeof value === 'object' && value !== null && (keys = Object.keys(value)).length === 1) {
        sub_key = keys[0];
        switch (sub_key) {
          case '$not':
            if (value[sub_key] === null) {
              return "NOT " + column + " IS NULL";
            } else {
              return "(NOT (" + (this._buildWhereSingle(property, key, value[sub_key], params)) + ") OR " + column + " IS NULL)";
            }
            break;
          case '$in':
            values = value[sub_key];
            if (values.length === 0) {
              return this._false_value;
            }
            values = values.map((function(_this) {
              return function(value) {
                params.push(value);
                return _this._param_place_holder(params.length);
              };
            })(this));
            return column + " IN (" + (values.join(',')) + ")";
          case '$gt':
            op = '>';
            value = value[sub_key];
            break;
          case '$lt':
            op = '<';
            value = value[sub_key];
            break;
          case '$gte':
            op = '>=';
            value = value[sub_key];
            break;
          case '$lte':
            op = '<=';
            value = value[sub_key];
            break;
          case '$contains':
            op = ' ' + this._contains_op + ' ';
            values = value[sub_key];
            if (!Array.isArray(values)) {
              values = [values];
            }
            if (values.length === 0) {
              return this._false_value;
            }
            values = values.map((function(_this) {
              return function(value) {
                params.push('%' + value + '%');
                return column + op + _this._param_place_holder(params.length);
              };
            })(this));
            return "(" + (values.join(' OR ')) + ")";
          default:
            throw new Error("unknown operator '" + sub_key + "'");
        }
      } else if (value === null) {
        return column + " IS NULL";
      }
      params.push(this._convertValueType(value, property_type_class));
      return column + op + this._param_place_holder(params.length);
    };

    SQLAdapterBase.prototype._buildWhere = function(schema, conditions, params, conjunction) {
      var key, keys, subs;
      if (conjunction == null) {
        conjunction = 'AND';
      }
      if (Array.isArray(conditions)) {
        subs = conditions.map((function(_this) {
          return function(condition) {
            return _this._buildWhere(schema, condition, params);
          };
        })(this));
      } else if (typeof conditions === 'object') {
        keys = Object.keys(conditions);
        if (keys.length === 0) {
          return '';
        }
        if (keys.length === 1) {
          key = keys[0];
          if (key.substr(0, 1) === '$') {
            switch (key) {
              case '$and':
                return this._buildWhere(schema, conditions[key], params, 'AND');
              case '$or':
                return this._buildWhere(schema, conditions[key], params, 'OR');
            }
          } else {
            return this._buildWhereSingle(schema[key], key, conditions[key], params);
          }
        } else {
          subs = keys.map((function(_this) {
            return function(key) {
              return _this._buildWhereSingle(schema[key], key, conditions[key], params);
            };
          })(this));
        }
      } else {
        throw new Error("'" + (JSON.stringify(conditions)) + "' is not an object");
      }
      if (subs.length === 0) {
        return '';
      } else if (subs.length === 1) {
        return subs[0];
      } else {
        return '(' + subs.join(' ' + conjunction + ' ') + ')';
      }
    };

    SQLAdapterBase.prototype._buildGroupExpr = function(group_expr) {
      var op, sub_expr;
      op = Object.keys(group_expr)[0];
      if (op === '$sum') {
        sub_expr = group_expr[op];
        if (sub_expr === 1) {
          return "COUNT(*)";
        } else if (sub_expr.substr(0, 1) === '$') {
          return "SUM(" + (sub_expr.substr(1)) + ")";
        } else {
          throw new Error("unknown expression '" + (JSON.stringify(op)) + "'");
        }
      } else if (op === '$min') {
        sub_expr = group_expr[op];
        if (sub_expr.substr(0, 1) === '$') {
          return "MIN(" + (sub_expr.substr(1)) + ")";
        } else {
          throw new Error("unknown expression '" + (JSON.stringify(op)) + "'");
        }
      } else if (op === '$max') {
        sub_expr = group_expr[op];
        if (sub_expr.substr(0, 1) === '$') {
          return "MAX(" + (sub_expr.substr(1)) + ")";
        } else {
          throw new Error("unknown expression '" + (JSON.stringify(op)) + "'");
        }
      } else {
        throw new Error("unknown expression '" + (JSON.stringify(op)) + "'");
      }
    };

    SQLAdapterBase.prototype._buildGroupFields = function(group_by, group_fields) {
      var expr, field, selects;
      selects = [];
      if (group_by) {
        [].push.apply(selects, group_by);
      }
      for (field in group_fields) {
        expr = group_fields[field];
        selects.push((this._buildGroupExpr(expr)) + " as " + field);
      }
      return selects.join(',');
    };

    SQLAdapterBase.prototype._buildSelect = function(model_class, select) {
      var escape_ch, schema;
      if (select) {
        if (select.length > 0) {
          schema = model_class._schema;
          escape_ch = this._escape_ch;
          select = select.map(function(column) {
            return "" + escape_ch + schema[column]._dbname + escape_ch;
          });
          return 'id,' + select.join(',');
        } else {
          return 'id';
        }
      } else {
        return '*';
      }
    };

    return SQLAdapterBase;

  })(AdapterBase);

  module.exports = SQLAdapterBase;

}).call(this);
