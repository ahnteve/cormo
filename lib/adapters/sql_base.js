// Generated by CoffeeScript 1.4.0
(function() {
  var AdapterBase, SQLAdapterBase,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  AdapterBase = require('./base');

  SQLAdapterBase = (function(_super) {

    __extends(SQLAdapterBase, _super);

    function SQLAdapterBase() {
      return SQLAdapterBase.__super__.constructor.apply(this, arguments);
    }

    SQLAdapterBase.prototype._param_place_holder = function(pos) {
      return '?';
    };

    SQLAdapterBase.prototype._contains_op = 'LIKE';

    SQLAdapterBase.prototype._buildWhere = function(conditions, params, conjunction) {
      var key, keys, op, sub_key, subs, value, values,
        _this = this;
      if (conjunction == null) {
        conjunction = 'AND';
      }
      if (Array.isArray(conditions)) {
        subs = conditions.map(function(condition) {
          return _this._buildWhere(condition, params);
        });
      } else if (typeof conditions === 'object') {
        keys = Object.keys(conditions);
        if (keys.length === 0) {
          return '';
        }
        if (keys.length === 1) {
          key = keys[0];
          if (key.substr(0, 1) === '$') {
            switch (key) {
              case '$and':
                return this._buildWhere(conditions[key], params, 'AND');
              case '$or':
                return this._buildWhere(conditions[key], params, 'OR');
            }
          } else {
            value = conditions[key];
            op = '=';
            if (Array.isArray(value)) {
              values = value.map(function(value) {
                params.push(value);
                return _this._param_place_holder(params.length);
              });
              return "" + key + " IN (" + (values.join(',')) + ")";
            } else if (typeof value === 'object' && (keys = Object.keys(value)).length === 1) {
              sub_key = keys[0];
              if (sub_key === '$in') {
                values = value[sub_key];
                values = values.map(function(value) {
                  params.push(value);
                  return _this._param_place_holder(params.length);
                });
                return "" + key + " IN (" + (values.join(',')) + ")";
              }
              switch (sub_key) {
                case '$gt':
                  op = '>';
                  value = value[sub_key];
                  break;
                case '$lt':
                  op = '<';
                  value = value[sub_key];
                  break;
                case '$gte':
                  op = '>=';
                  value = value[sub_key];
                  break;
                case '$lte':
                  op = '<=';
                  value = value[sub_key];
                  break;
                case '$contains':
                  op = ' ' + this._contains_op + ' ';
                  value = '%' + value[sub_key] + '%';
              }
            }
            params.push(value);
            return key + op + this._param_place_holder(params.length);
          }
        } else {
          subs = keys.map(function(key) {
            var obj;
            obj = {};
            obj[key] = conditions[key];
            return _this._buildWhere(obj, params);
          });
        }
      } else {
        return '';
      }
      return '(' + subs.join(' ' + conjunction + ' ') + ')';
    };

    return SQLAdapterBase;

  })(AdapterBase);

  module.exports = SQLAdapterBase;

}).call(this);
