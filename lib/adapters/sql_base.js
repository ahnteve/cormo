// Generated by CoffeeScript 1.4.0
(function() {
  var AdapterBase, SQLAdapterBase, types,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  AdapterBase = require('./base');

  types = require('../types');

  SQLAdapterBase = (function(_super) {

    __extends(SQLAdapterBase, _super);

    function SQLAdapterBase() {
      return SQLAdapterBase.__super__.constructor.apply(this, arguments);
    }

    SQLAdapterBase.prototype._param_place_holder = function(pos) {
      return '?';
    };

    SQLAdapterBase.prototype._contains_op = 'LIKE';

    SQLAdapterBase.prototype._buildWhereSingle = function(property, key, value, params) {
      var keys, op, property_type, sub_key, values,
        _this = this;
      if (key !== 'id' && !(property != null)) {
        throw new Error("unknown column '" + key + "'");
      }
      property_type = property != null ? property.type : void 0;
      op = '=';
      if (Array.isArray(value)) {
        values = value.map(function(value) {
          params.push(value);
          return _this._param_place_holder(params.length);
        });
        return "" + (key.replace('.', '_')) + " IN (" + (values.join(',')) + ")";
      } else if (typeof value === 'object' && (keys = Object.keys(value)).length === 1) {
        sub_key = keys[0];
        switch (sub_key) {
          case '$not':
            if (value[sub_key] === null) {
              return "NOT " + (key.replace('.', '_')) + " IS NULL";
            } else {
              return "(NOT (" + (this._buildWhereSingle(property, key, value[sub_key], params)) + ") OR " + (key.replace('.', '_')) + " IS NULL)";
            }
            break;
          case '$in':
            values = value[sub_key];
            values = values.map(function(value) {
              params.push(value);
              return _this._param_place_holder(params.length);
            });
            return "" + (key.replace('.', '_')) + " IN (" + (values.join(',')) + ")";
          case '$gt':
            op = '>';
            value = value[sub_key];
            break;
          case '$lt':
            op = '<';
            value = value[sub_key];
            break;
          case '$gte':
            op = '>=';
            value = value[sub_key];
            break;
          case '$lte':
            op = '<=';
            value = value[sub_key];
            break;
          case '$contains':
            op = ' ' + this._contains_op + ' ';
            value = '%' + value[sub_key] + '%';
            break;
          default:
            throw new Error("unknown operator '" + sub_key + "'");
        }
      }
      if (property_type === types.Date) {
        value = new Date(value);
      }
      params.push(value);
      return key.replace('.', '_') + op + this._param_place_holder(params.length);
    };

    SQLAdapterBase.prototype._buildWhere = function(schema, conditions, params, conjunction) {
      var key, keys, subs,
        _this = this;
      if (conjunction == null) {
        conjunction = 'AND';
      }
      if (Array.isArray(conditions)) {
        subs = conditions.map(function(condition) {
          return _this._buildWhere(schema, condition, params);
        });
      } else if (typeof conditions === 'object') {
        keys = Object.keys(conditions);
        if (keys.length === 0) {
          return '';
        }
        if (keys.length === 1) {
          key = keys[0];
          if (key.substr(0, 1) === '$') {
            switch (key) {
              case '$and':
                return this._buildWhere(schema, conditions[key], params, 'AND');
              case '$or':
                return this._buildWhere(schema, conditions[key], params, 'OR');
            }
          } else {
            return this._buildWhereSingle(schema[key], key, conditions[key], params);
          }
        } else {
          subs = keys.map(function(key) {
            return _this._buildWhereSingle(schema[key], key, conditions[key], params);
          });
        }
      } else {
        throw new Error("'" + (JSON.stringify(conditions)) + "' is not an object");
      }
      if (subs.length === 0) {
        return '';
      } else if (subs.length === 1) {
        return subs[0];
      } else {
        return '(' + subs.join(' ' + conjunction + ' ') + ')';
      }
    };

    SQLAdapterBase.prototype._buildGroupFields = function(group_by, group_fields) {
      var expr, field, op, selects, sub_expr;
      selects = [];
      if (group_by) {
        [].push.apply(selects, group_by);
      }
      for (field in group_fields) {
        expr = group_fields[field];
        op = Object.keys(expr)[0];
        if (op === '$sum') {
          sub_expr = expr[op];
          if (sub_expr === 1) {
            selects.push("COUNT(*) as " + field);
          } else if (sub_expr.substr(0, 1) === '$') {
            selects.push("SUM(" + (sub_expr.substr(1)) + ") as " + field);
          } else {
            throw new Error("unknown expression '" + (JSON.stringify(op)) + "'");
          }
        } else {
          throw new Error("unknown expression '" + (JSON.stringify(op)) + "'");
        }
      }
      return selects.join(',');
    };

    return SQLAdapterBase;

  })(AdapterBase);

  module.exports = SQLAdapterBase;

}).call(this);
