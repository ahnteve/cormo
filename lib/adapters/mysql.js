// Generated by CoffeeScript 1.3.3
(function() {
  var AdapterBase, MySQLAdapter, async, mysql, _propertyToSQL, _typeToSQL,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  try {
    mysql = require('mysql');
  } catch (e) {
    console.log('Install mysql module to use this adapter');
    process.exit(1);
  }

  AdapterBase = require('./base');

  async = require('async');

  _typeToSQL = function(property) {
    switch (property.type) {
      case String:
        return 'VARCHAR(255)';
      case Number:
        return 'INT(11)';
    }
  };

  _propertyToSQL = function(property) {
    var type;
    type = _typeToSQL(property);
    if (type) {
      return type + ' NULL';
    }
  };

  /*
  # Adapter for MySQL
  # @param {mysql.Connection} client
  */


  MySQLAdapter = (function(_super) {

    __extends(MySQLAdapter, _super);

    function MySQLAdapter(connection, client) {
      this._connection = connection;
      this._client = client;
    }

    MySQLAdapter.prototype._query = function(sql, data, callback) {
      return this._client.query(sql, data, callback);
    };

    MySQLAdapter.prototype._createTable = function(model, callback) {
      var field, field_sql, property, sql, table, _ref;
      table = MySQLAdapter.toCollectionName(model);
      sql = [];
      sql.push('id BIGINT NOT NULL AUTO_INCREMENT UNIQUE PRIMARY KEY');
      _ref = this._connection.models[model]._schema;
      for (field in _ref) {
        property = _ref[field];
        field_sql = _propertyToSQL(property);
        if (field_sql) {
          sql.push(field + ' ' + field_sql);
        }
      }
      sql = "CREATE TABLE " + table + " ( " + (sql.join(',')) + " )";
      return this._query(sql, function(error, result) {
        if (error) {
          return callback(MySQLAdapter.wrapError('unknown error', error));
        }
        return callback(null);
      });
    };

    MySQLAdapter.prototype._alterTable = function(model, fields, callback) {
      return callback(null);
    };

    MySQLAdapter.prototype._applySchema = function(model, callback) {
      var table,
        _this = this;
      table = MySQLAdapter.toCollectionName(model);
      return this._query("SHOW FIELDS FROM " + table, function(error, fields) {
        if ((error != null ? error.code : void 0) === 'ER_NO_SUCH_TABLE') {
          return _this._createTable(model, callback);
        } else {
          return _this._alterTable(model, fields, callback);
        }
      });
    };

    MySQLAdapter.prototype.applySchemas = function(callback) {
      var _this = this;
      return async.forEach(Object.keys(this._connection.models), function(model, callback) {
        return _this._applySchema(model, callback);
      }, function(error) {
        return callback(error);
      });
    };

    /*
      # Create a record
      # @param {String} model
      # @param {Object} data
      # @param {Function} callback
      # @param {Error} callback.error
      # @param {String} callback.id
    */


    MySQLAdapter.prototype.create = function(model, data, callback) {
      var table;
      table = MySQLAdapter.toCollectionName(model);
      return this._query("INSERT INTO " + table + " SET ?", data, function(error, result) {
        if (error) {
          return callback(MySQLAdapter.wrapError('unknown error', error));
        }
        if (result != null ? result.insertId : void 0) {
          return callback(null, result.insertId);
        } else {
          return callback(new Error('unexpected result'));
        }
      });
    };

    return MySQLAdapter;

  })(AdapterBase);

  /*
  # Initialize MySQL adapter
  # @param {Connection} connection
  # @param {Object} settings
  # @param {String} [settings.host]
  # @param {Number} [settings.port]
  # @param {String} [settings.user]
  # @param {String} [settings.password]
  # @param {String} settings.database
  # @param {Function} callback
  # @param {Error} callback.error
  # @param {MySQLAdapter} callback.adapter
  */


  module.exports = function(connection, settings, callback) {
    var client;
    client = mysql.createConnection({
      host: settings.host,
      port: settings.port,
      user: settings.user,
      password: settings.password
    });
    return client.connect(function(error) {
      var adapter;
      if (error) {
        return callback(MySQLAdapter.wrapError('failed to connect', error));
      }
      adapter = new MySQLAdapter(connection, client);
      return client.query("USE `" + settings.database + "`", function(error) {
        var msg;
        if (!error) {
          return callback(null, adapter);
        }
        if (error.code === 'ER_BAD_DB_ERROR') {
          return client.query("CREATE DATABASE `" + settings.database + "`", function(error) {
            if (error) {
              return callback(MySQLAdapter.wrapError('unknown error', error));
            }
            return callback(null, adapter);
          });
        } else {
          msg = error.code === 'ER_DBACCESS_DENIED_ERROR' ? "no access right to the database '" + settings.database + "'" : 'unknown error';
          return callback(MySQLAdapter.wrapError(msg, error));
        }
      });
    });
  };

}).call(this);
